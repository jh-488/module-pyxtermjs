{"mappings":"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","sources":["node_modules/xterm-addon-web-links/lib/xterm-addon-web-links.js","node_modules/xterm-addon-web-links/lib/webpack:/WebLinksAddon/webpack/universalModuleDefinition","node_modules/xterm-addon-web-links/lib/webpack:/WebLinksAddon/src/WebLinkProvider.ts","node_modules/xterm-addon-web-links/lib/webpack:/WebLinksAddon/webpack/bootstrap","node_modules/xterm-addon-web-links/lib/webpack:/WebLinksAddon/src/WebLinksAddon.ts"],"sourcesContent":[null,"(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WebLinksAddon\"] = factory();\n\telse\n\t\troot[\"WebLinksAddon\"] = factory();\n})(self, () => {\nreturn ","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ILinkProvider, ILink, Terminal, IViewportRange, IBufferLine } from 'xterm';\n\nexport interface ILinkProviderOptions {\n  hover?(event: MouseEvent, text: string, location: IViewportRange): void;\n  leave?(event: MouseEvent, text: string): void;\n  urlRegex?: RegExp;\n}\n\nexport class WebLinkProvider implements ILinkProvider {\n\n  constructor(\n    private readonly _terminal: Terminal,\n    private readonly _regex: RegExp,\n    private readonly _handler: (event: MouseEvent, uri: string) => void,\n    private readonly _options: ILinkProviderOptions = {}\n  ) {\n\n  }\n\n  public provideLinks(y: number, callback: (links: ILink[] | undefined) => void): void {\n    const links = LinkComputer.computeLink(y, this._regex, this._terminal, this._handler);\n    callback(this._addCallbacks(links));\n  }\n\n  private _addCallbacks(links: ILink[]): ILink[] {\n    return links.map(link => {\n      link.leave = this._options.leave;\n      link.hover = (event: MouseEvent, uri: string): void => {\n        if (this._options.hover) {\n          const { range } = link;\n          this._options.hover(event, uri, range);\n        }\n      };\n      return link;\n    });\n  }\n}\n\nexport class LinkComputer {\n  public static computeLink(y: number, regex: RegExp, terminal: Terminal, activate: (event: MouseEvent, uri: string) => void): ILink[] {\n    const rex = new RegExp(regex.source, (regex.flags || '') + 'g');\n\n    const [lines, startLineIndex] = LinkComputer._getWindowedLineStrings(y - 1, terminal);\n    const line = lines.join('');\n\n    let match;\n    const result: ILink[] = [];\n\n    while (match = rex.exec(line)) {\n      const text = match[0];\n\n      // check via URL if the matched text would form a proper url\n      // NOTE: This outsources the ugly url parsing to the browser.\n      // To avoid surprising auto expansion from URL we additionally\n      // check afterwards if the provided string resembles the parsed\n      // one close enough:\n      // - decodeURI  decode path segement back to byte repr\n      //              to detect unicode auto conversion correctly\n      // - append /   also match domain urls w'o any path notion\n      try {\n        const url = new URL(text);\n        const urlText = decodeURI(url.toString());\n        if (text !== urlText && text + '/' !== urlText) {\n          continue;\n        }\n      } catch (e) {\n        continue;\n      }\n\n      // map string positions back to buffer positions\n      // values are 0-based right side excluding\n      const [startY, startX] = LinkComputer._mapStrIdx(terminal, startLineIndex, 0, match.index);\n      const [endY, endX] = LinkComputer._mapStrIdx(terminal, startY, startX, text.length);\n\n      if (startY === -1 || startX === -1 || endY === -1 || endX === -1) {\n        continue;\n      }\n\n      // range expects values 1-based right side including, thus +1 except for endX\n      const range = {\n        start: {\n          x: startX + 1,\n          y: startY + 1\n        },\n        end: {\n          x: endX,\n          y: endY + 1\n        }\n      };\n\n      result.push({ range, text, activate });\n    }\n\n    return result;\n  }\n\n  /**\n   * Get wrapped content lines for the current line index.\n   * The top/bottom line expansion stops at whitespaces or length > 2048.\n   * Returns an array with line strings and the top line index.\n   *\n   * NOTE: We pull line strings with trimRight=true on purpose to make sure\n   * to correctly match urls with early wrapped wide chars. This corrupts the string index\n   * for 1:1 backmapping to buffer positions, thus needs an additional correction in _mapStrIdx.\n   */\n  private static _getWindowedLineStrings(lineIndex: number, terminal: Terminal): [string[], number] {\n    let line: IBufferLine | undefined;\n    let topIdx = lineIndex;\n    let bottomIdx = lineIndex;\n    let length = 0;\n    let content = '';\n    const lines: string[] = [];\n\n    if ((line = terminal.buffer.active.getLine(lineIndex))) {\n      const currentContent = line.translateToString(true);\n\n      // expand top, stop on whitespaces or length > 2048\n      if (line.isWrapped && currentContent[0] !== ' ') {\n        length = 0;\n        while ((line = terminal.buffer.active.getLine(--topIdx)) && length < 2048) {\n          content = line.translateToString(true);\n          length += content.length;\n          lines.push(content);\n          if (!line.isWrapped || content.indexOf(' ') !== -1) {\n            break;\n          }\n        }\n        lines.reverse();\n      }\n\n      // append current line\n      lines.push(currentContent);\n\n      // expand bottom, stop on whitespaces or length > 2048\n      length = 0;\n      while ((line = terminal.buffer.active.getLine(++bottomIdx)) && line.isWrapped && length < 2048) {\n        content = line.translateToString(true);\n        length += content.length;\n        lines.push(content);\n        if (content.indexOf(' ') !== -1) {\n          break;\n        }\n      }\n    }\n    return [lines, topIdx];\n  }\n\n  /**\n   * Map a string index back to buffer positions.\n   * Returns buffer position as [lineIndex, columnIndex] 0-based,\n   * or [-1, -1] in case the lookup ran into a non-existing line.\n   */\n  private static _mapStrIdx(terminal: Terminal, lineIndex: number, rowIndex: number, stringIndex: number): [number, number] {\n    const buf = terminal.buffer.active;\n    const cell = buf.getNullCell();\n    let start = rowIndex;\n    while (stringIndex) {\n      const line = buf.getLine(lineIndex);\n      if (!line) {\n        return [-1, -1];\n      }\n      for (let i = start; i < line.length; ++i) {\n        line.getCell(i, cell);\n        const chars = cell.getChars();\n        const width = cell.getWidth();\n        if (width) {\n          stringIndex -= chars.length || 1;\n\n          // correct stringIndex for early wrapped wide chars:\n          // - currently only happens at last cell\n          // - cells to the right are reset with chars='' and width=1 in InputHandler.print\n          // - follow-up line must be wrapped and contain wide char at first cell\n          // --> if all these conditions are met, correct stringIndex by +1\n          if (i === line.length - 1 && chars === '') {\n            const line = buf.getLine(lineIndex + 1);\n            if (line && line.isWrapped) {\n              line.getCell(0, cell);\n              if (cell.getWidth() === 2) {\n                stringIndex += 1;\n              }\n            }\n          }\n        }\n        if (stringIndex < 0) {\n          return [lineIndex, i];\n        }\n      }\n      lineIndex++;\n      start = 0;\n    }\n    return [lineIndex, start];\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal, ITerminalAddon, IDisposable } from 'xterm';\nimport { ILinkProviderOptions, WebLinkProvider } from './WebLinkProvider';\n\n// consider everthing starting with http:// or https://\n// up to first whitespace, `\"` or `'` as url\n// NOTE: The repeated end clause is needed to not match a dangling `:`\n// resembling the old (...)*([^:\"\\'\\\\s]) final path clause\n// additionally exclude early + final:\n// - unsafe from rfc3986: !*'()\n// - unsafe chars from rfc1738: {}|\\^~[]` (minus [] as we need them for ipv6 adresses, also allow ~)\n// also exclude as finals:\n// - final interpunction like ,.!?\n// - any sort of brackets <>()[]{} (not spec conform, but often used to enclose urls)\n// - unsafe chars from rfc1738: {}|\\^~[]`\nconst strictUrlRegex = /https?:[/]{2}[^\\s\"'!*(){}|\\\\\\^<>`]*[^\\s\"':,.!?{}|\\\\\\^~\\[\\]`()<>]/;\n\n\nfunction handleLink(event: MouseEvent, uri: string): void {\n  const newWindow = window.open();\n  if (newWindow) {\n    try {\n      newWindow.opener = null;\n    } catch {\n      // no-op, Electron can throw\n    }\n    newWindow.location.href = uri;\n  } else {\n    console.warn('Opening link blocked as opener could not be cleared');\n  }\n}\n\nexport class WebLinksAddon implements ITerminalAddon {\n  private _terminal: Terminal | undefined;\n  private _linkProvider: IDisposable | undefined;\n\n  constructor(\n    private _handler: (event: MouseEvent, uri: string) => void = handleLink,\n    private _options: ILinkProviderOptions = {}\n  ) {\n  }\n\n  public activate(terminal: Terminal): void {\n    this._terminal = terminal;\n    const options = this._options as ILinkProviderOptions;\n    const regex = options.urlRegex || strictUrlRegex;\n    this._linkProvider = this._terminal.registerLinkProvider(new WebLinkProvider(this._terminal, regex, this._handler, options));\n  }\n\n  public dispose(): void {\n    this._linkProvider?.dispose();\n  }\n}\n"],"names":["root","factory","exports","module","define","amd","self","constructor","_terminal","_regex","_handler","_options","provideLinks","y","callback","links","LinkComputer","computeLink","this","_addCallbacks","map","link","leave","hover","event","uri","range","regex","terminal","activate","rex","RegExp","source","flags","lines","startLineIndex","_getWindowedLineStrings","line","join","match","result","exec","text","url","URL","urlText","decodeURI","toString","e","startY","startX","_mapStrIdx","index","endY","endX","length","start","x","end","push","lineIndex","topIdx","bottomIdx","content","buffer","active","getLine","currentContent","translateToString","isWrapped","indexOf","reverse","rowIndex","stringIndex","buf","cell","getNullCell","i","getCell","chars","getChars","getWidth","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","strictUrlRegex","handleLink","newWindow","window","open","opener","location","href","console","warn","options","urlRegex","_linkProvider","registerLinkProvider","WebLinkProvider","dispose"],"version":3,"file":"index.2803947f.js.map","sourceRoot":"/__parcel_source_root/"}